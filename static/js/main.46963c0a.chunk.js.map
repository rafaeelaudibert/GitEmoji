{"version":3,"sources":["assets/logo.png","services/DataDownloader.jsx","components/Containers/GitEmojiNavbar.jsx","components/Containers/GitEmojiHero.jsx","components/TableComponents/Loading.jsx","components/TableComponents/Error.jsx","components/TableComponents/Emoji.jsx","components/TableComponents/SubCategory.jsx","components/TableComponents/Category.jsx","components/Containers/Table.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","currentTime","Date","getTime","storeData","data","localStorage","setItem","JSON","stringify","expiration","downloadAndStoreData","a","async","getItem","parse","axios","get","console","info","getData","GitEmojiNavbar","transparent","color","Brand","Item","href","alt","src","logo","role","Burger","name","Menu","backgroundColor","Segment","align","className","Group","as","target","icon","faGithub","GitEmojiHero","inputValue","handleInputChange","Body","subtitle","placeholder","type","value","onChange","Foot","Loading","Error","error","size","toString","Emoji","emojis","emojiNames","map","emoji","emojiId","emojiPhotoUrl","emojiUrl","emojiLiteral","useState","clicked","setClicked","setError","effect","height","width","emojiName","emojiIdx","key","onClick","navigator","permissions","query","then","result","state","clipboard","writeText","setTimeout","copyToClipboard","SubCategory","multiline","breakpoint","gapSize","Category","subCategories","Object","entries","Table","category","App","useAsync","promiseFn","isLoading","setInputValue","fromEntries","categoryName","subCategory","filter","some","emojiData","includes","length","keys","containerBox","event","fluid","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,kNCMrCC,EAAc,kBAAM,IAAIC,MAAOC,WAQ/BC,EAAY,SAAAC,GAAI,OACpBC,aAAaC,QAZU,YAcrBC,KAAKC,UAAU,CACbJ,OACAK,WAAYT,IAAgB,WAI5BU,EAAuB,4BAAAC,EAAAC,OAAA,mDAdgB,OAA3CP,aAAaQ,QANU,cAOvBN,KAAKO,MAAMT,aAAaQ,QAPD,cAO4BJ,WAAaT,IAarC,kCAAAW,EAAA,MAXFI,IAAMC,IAVhB,oDAqBY,gBAEjBZ,EAFiB,EAEjBA,KACRD,EAAUC,GAHe,sBAKzBa,QAAQC,KAAK,qBALY,sCAcdC,EALC,oBAAAR,EAAAC,OAAA,kEAAAD,EAAA,MACRD,KADQ,gCAEPH,KAAKO,MAAMT,aAAaQ,QA/BR,cA+BmCT,MAF5C,sC,iCCWDgB,EAnCQ,WACrB,OACE,kBAAC,IAAD,CAAQC,aAAW,EAACC,MAAM,UACxB,kBAAC,IAAOC,MAAR,KACE,kBAAC,IAAOC,KAAR,CAAaC,KAAK,KAChB,kBAAC,IAAD,CAAOC,IAAI,OAAOC,IAAKC,IAAMC,KAAK,kBAEpC,kBAAC,IAAOC,OAAR,CAAeC,KAAK,UAEtB,kBAAC,IAAOC,KAAR,CAAaC,gBAAgB,UAC3B,kBAAC,IAAOC,QAAR,CACEC,MAAM,MACNC,UAAU,0CAEV,kBAAC,IAAOC,MAAR,KACE,kBAAC,IAAD,CACEf,MAAM,UACNgB,GAAG,IACHP,KAAK,sBACLN,KAAK,8CACLc,OAAO,UAEP,kBAAC,IAAD,CACEC,KAAMC,IACNL,UAAU,wBAEZ,gDCZCM,EAnBM,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,kBAC/B,OACE,kBAAC,IAAD,CAAMtB,MAAM,UAAUc,UAAU,0CAC9B,kBAAC,IAAKS,KAAN,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,sBACA,kBAAC,IAAD,CAAOC,UAAQ,GAAf,+CACA,qGACA,kBAAC,IAAD,CAAOC,YAAY,mBAAmBC,KAAK,OAAOC,MAAON,EAAYO,SAAUN,MAGnF,kBAAC,IAAKO,KAAN,CAAWhB,MAAM,MAAMC,UAAU,wBAAjC,uECPOgB,EAJC,WACd,OAAO,kBAAC,IAAD,CAAU9B,MAAM,YCcV+B,EAfD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,kBAAC,IAAD,CAAShC,MAAM,UACb,kBAAC,IAAQuB,KAAT,KACE,kBAAC,IAAD,CAAOT,UAAU,aAAjB,WACA,kBAAC,IAAD,CAAOU,UAAQ,EAACS,KAAM,GAAtB,kDACiD,6BADjD,0BAICD,EAAME,c,QCyDAC,EA7CD,SAAC,GAAsB,IAAdC,EAAa,EAAnBtD,KACTuD,EAAaD,EAAOE,KAAI,SAAAC,GAAK,iBAAQA,EAAMC,QAAd,QAC7BC,EAAgBL,EAAO,GAAGM,SAC1BC,EAAeP,EAAO,GAAGO,aAHG,EAKJC,mBAAS,MALL,mBAK3BC,EAL2B,KAKlBC,EALkB,OAMRF,mBAAS,MAND,mBAM3BZ,EAN2B,KAMpBe,EANoB,KAQlC,OACE,kBAAC,IAAD,CAAQjC,UAAW,oDACjB,kBAAC,IAAD,CAAKA,UAAU,2GAEX,kBAAC,gBAAD,CACET,IAAKoC,EACLrC,IAAKuC,EACLK,OAAO,UACPC,OAAQ,GACRC,MAAO,KAGX,6BACCb,EAAWC,KAAI,SAACa,EAAWC,GAAZ,OACd,kBAAC,IAAD,CACEC,IAAKF,EACLnC,GAAG,MACHP,KAAI,wBAAmB0C,GACvBnD,MAAO6C,IAAYO,EAAW,UAAY,QAC1CtC,UAAU,iCACVwC,QAAS,kBAhDG,SAACxE,EAAMsE,EAAUN,EAAYC,GAA7B,OACtBQ,UAAUC,YAAYC,MAAM,CAAEhD,KAAM,oBAAqBiD,MAAK,SAAAC,GACvC,YAAjBA,EAAOC,OAAwC,WAAjBD,EAAOC,MACvCL,UAAUM,UAAUC,UAAUhF,GAAM4E,MAClC,WACEZ,EAAWM,GACXW,YAAW,kBAAMjB,EAAW,QAAO,QAErC,WACEC,GAAS,GACTgB,YAAW,kBAAMhB,GAAS,KAAQ,SAItCA,GAAS,GACTgB,YAAW,kBAAMhB,GAAS,KAAQ,SAkC1BiB,CAAgBb,EAAWC,EAAUN,EAAYC,KAGlDI,MAGJnB,GACC,kBAAC,IAAD,CAAShB,GAAG,QAAQF,UAAU,mBAA9B,oDC1CKmD,EAdK,SAAC,GAAsB,IAApBxD,EAAmB,EAAnBA,KAAM2B,EAAa,EAAbA,OAC3B,OACE,oCACE,kBAAC,IAAD,CAAOH,KAAM,GAAIxB,GAEjB,kBAAC,IAAOM,MAAR,CAAcmD,WAAS,EAACC,WAAW,SAASC,QAAS,GAClDhC,EAAOE,KAAI,SAAAxD,GAAI,OACd,kBAAC,EAAD,CAAOuE,IAAKvE,EAAK,GAAG0D,QAAS1D,KAAMA,UCI9BuF,EAXE,SAAC,GAA6B,IAA3B5D,EAA0B,EAA1BA,KAAM6D,EAAoB,EAApBA,cACxB,OACE,oCACE,kBAAC,IAAD,CAAOrC,KAAM,GAAIxB,GAChB8D,OAAOC,QAAQF,GAAehC,KAAI,mCAAE7B,EAAF,KAAQ2B,EAAR,YACjC,kBAAC,EAAD,CAAaiB,IAAK5C,EAAMA,KAAMA,EAAM2B,OAAQA,SCOrCqC,EAbD,SAAC,GAAc,IAAZ3F,EAAW,EAAXA,KACf,OAAOyF,OAAOC,QAAQ1F,GAAMwD,KAAI,YAAgC,IAAD,mBAA7BoC,EAA6B,KAAnBJ,EAAmB,KAC7D,OACE,kBAAC,EAAD,CACEjB,IAAKqB,EACL5D,UAAU,4CACVL,KAAMiE,EACNJ,cAAeA,QC0DRK,G,YAjDH,WAAO,IAAD,EACiBC,YAAS,CAAEC,UAAWhF,IAAjDf,EADU,EACVA,KAAMkD,EADI,EACJA,MAAO8C,EADH,EACGA,UADH,EAGoBlC,mBAAS,IAH7B,mBAGTvB,EAHS,KAGG0D,EAHH,KAOJ,MAARjG,IACFA,EAAOyF,OAAOS,YACZT,OAAOC,QAAQ1F,GACZwD,KAAI,mCAAE2C,EAAF,KAAgBC,EAAhB,WAAiC,CACpCD,EACAV,OAAOS,YACLT,OAAOC,QAAQU,GACZ5C,KAAI,yCAA+B,CAA/B,UAEI6C,QAAO,SAAA5C,GAAK,OACjBA,EAAM6C,MAAK,SAAAC,GAAS,OAClBA,EAAU7C,QAAQ8C,SAASjE,aAIhC8D,QAAO,oDAAuCI,OAAS,UAG7DJ,QACC,mCAAiBD,GAAjB,kBAAkCX,OAAOiB,KAAKN,GAAaK,OAAS,OAK5E,IAAME,EACHX,GAAa,kBAAC,EAAD,OACb9C,GAAS,kBAAC,EAAD,CAAOA,MAAOA,KACvBlD,GAAQ,kBAAC,EAAD,CAAOA,KAAMA,IAExB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEuC,WAAYA,EACZC,kBArCoB,SAAAoE,GAAK,OAAIX,EAAcW,EAAMzE,OAAOU,UAuC1D,kBAAC,IAAD,CAAWgE,OAAK,GAAhB,IAAmBF,EAAnB,KACA,kBAAC,IAAD,SCnDAG,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAyCN,SAASC,EAAgBC,EAAOC,GAC9B7C,UAAU8C,cACPC,SAASH,GACTzC,MAAK,SAAA6C,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfL,UAAU8C,cAAcO,YAI1BjH,QAAQkH,IACN,iHAKET,GAAUA,EAAOU,UACnBV,EAAOU,SAASP,KAMlB5G,QAAQkH,IAAI,sCAGRT,GAAUA,EAAOW,WACnBX,EAAOW,UAAUR,WAO5BS,OAAM,SAAAhF,GACLrC,QAAQqC,MAAM,4CAA6CA,MC9FjEiF,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBhB,GACvB,GAA6C,kBAAmB7C,UAAW,CAMzE,GAJkB,IAAI8D,IACpBC,YACAxB,OAAOC,SAAS5F,MAEJoH,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,YAAN,sBAEP1B,IAgEV,SAAiCO,EAAOC,GAEtCqB,MAAMtB,EAAO,CACXuB,QAAS,CAAE,iBAAkB,YAE5BhE,MAAK,SAAAiE,GAEJ,IAAMC,EAAcD,EAASD,QAAQhI,IAAI,gBAEnB,MAApBiI,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CvE,UAAU8C,cAAc0B,MAAMrE,MAAK,SAAA6C,GACjCA,EAAayB,aAAatE,MAAK,WAC7BoC,OAAOC,SAASkC,eAKpB/B,EAAgBC,EAAOC,MAG1BY,OAAM,WACLrH,QAAQkH,IACN,oEAvFAqB,CAAwB/B,EAAOC,GAI/B7C,UAAU8C,cAAc0B,MAAMrE,MAAK,WACjC/D,QAAQkH,IACN,iHAMJX,EAAgBC,EAAOC,OC3C/BC,K","file":"static/js/main.46963c0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3fe6a472.png\";","import axios from \"axios\";\n\nconst DATA_URL = \"https://gitemoji.s3.amazonaws.com/gitemoji.json\";\nconst DATA_STORAGE_KEY = \"emojiData\";\nconst EXPIRATION_IN_MINUTES = 10080; // 7 days\n\nconst currentTime = () => new Date().getTime();\n\nconst hasValidCachedData = () =>\n  localStorage.getItem(DATA_STORAGE_KEY) !== null &&\n  JSON.parse(localStorage.getItem(DATA_STORAGE_KEY)).expiration > currentTime();\n\nconst downloadData = () => axios.get(DATA_URL);\n\nconst storeData = data =>\n  localStorage.setItem(\n    DATA_STORAGE_KEY,\n    JSON.stringify({\n      data,\n      expiration: currentTime() + 60000 * EXPIRATION_IN_MINUTES\n    })\n  );\n\nconst downloadAndStoreData = async () => {\n  if (!hasValidCachedData()) {\n    const { data } = await downloadData();\n    storeData(data);\n  } else {\n    console.info(\"Using cached data\");\n  }\n};\n\nconst getData = async () => {\n  await downloadAndStoreData();\n  return JSON.parse(localStorage.getItem(DATA_STORAGE_KEY)).data;\n};\n\nexport default getData;\n","import React from \"react\";\nimport { Button, Navbar, Image } from \"rbx\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nimport logo from \"../../assets/logo.png\";\n\nconst GitEmojiNavbar = () => {\n  return (\n    <Navbar transparent color=\"danger\">\n      <Navbar.Brand>\n        <Navbar.Item href=\"#\">\n          <Image alt=\"Logo\" src={logo} role=\"presentation\" />\n        </Navbar.Item>\n        <Navbar.Burger name=\"Menu\" />\n      </Navbar.Brand>\n      <Navbar.Menu backgroundColor=\"danger\">\n        <Navbar.Segment\n          align=\"end\"\n          className=\"has-margin-right-md has-margin-left-sm\"\n        >\n          <Button.Group>\n            <Button\n              color=\"warning\"\n              as=\"a\"\n              name=\"GitEmoji Repository\"\n              href=\"https://github.com/rafaeelaudibert/GitEmoji\"\n              target=\"_blank\"\n            >\n              <FontAwesomeIcon\n                icon={faGithub}\n                className=\"has-margin-right-sm\"\n              />\n              <strong>Github</strong>\n            </Button>\n          </Button.Group>\n        </Navbar.Segment>\n      </Navbar.Menu>\n    </Navbar>\n  );\n};\n\nexport default GitEmojiNavbar;\n","import React from 'react';\nimport { Hero, Input, Container, Title } from 'rbx';\n\nconst GitEmojiHero = ({inputValue, handleInputChange}) => {  \n    return (\n      <Hero color=\"primary\" className=\"is-bold is-medium has-margin-bottom-lg\">\n        <Hero.Body>\n          <Container>\n            <Title>Github Emojis</Title>\n            <Title subtitle> You can search for them in the box below  </Title>\n            <small> You can click in the buttons to copy their tag to your clipboard </small>\n            <Input placeholder=\"Search any emoji\" type=\"text\" value={inputValue} onChange={handleInputChange}></Input>\n          </Container>\n        </Hero.Body>\n        <Hero.Foot align=\"end\" className=\"has-padding-right-lg\">\n          This is not affiliated, endorsed or related to Github in any way.\n        </Hero.Foot>\n      </Hero>\n    )\n\n}\n\nexport default GitEmojiHero","import React from \"react\";\nimport { Progress } from \"rbx\";\n\nconst Loading = () => {\n  return <Progress color=\"danger\" />;\n};\n\nexport default Loading;\n","import React from \"react\";\nimport { Message, Title } from \"rbx\";\n\nconst Error = ({ error }) => {\n  return (\n    <Message color=\"danger\">\n      <Message.Body>\n        <Title className=\"is-danger\"> Oops! </Title>\n        <Title subtitle size={5}>\n          There was an error while downloading the data. <br />\n          The message error was:\n        </Title>\n        {error.toString()}\n      </Message.Body>\n    </Message>\n  );\n};\n\nexport default Error;\n","import React, { useState } from \"react\";\nimport { Box, Column, Button, Generic } from \"rbx\";\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\n\nconst copyToClipboard = (data, emojiIdx, setClicked, setError) =>\n  navigator.permissions.query({ name: \"clipboard-write\" }).then(result => {\n    if (result.state === \"granted\" || result.state === \"prompt\") {\n      navigator.clipboard.writeText(data).then(\n        function() {\n          setClicked(emojiIdx);\n          setTimeout(() => setClicked(null), 2000);\n        },\n        function() {\n          setError(true);\n          setTimeout(() => setError(false), 4000);\n        }\n      );\n    } else {\n      setError(true);\n      setTimeout(() => setError(false), 4000);\n    }\n  });\n\n// We are actually receiving a list of emojis to display on each emoji\nconst Emoji = ({ data: emojis }) => {\n  const emojiNames = emojis.map(emoji => `:${emoji.emojiId}:`);\n  const emojiPhotoUrl = emojis[0].emojiUrl;\n  const emojiLiteral = emojis[0].emojiLiteral;\n\n  const [clicked, setClicked] = useState(null);\n  const [error, setError] = useState(null);\n\n  return (\n    <Column className={\"is-6-mobile is-4-tablet is-3-fullhd is-2-desktop\"}>\n      <Box className=\"has-text-centered has-padding-bottom-xsm has-padding-top-xsm has-padding-right-xsm has-padding-left-xsm\">\n        {\n          <LazyLoadImage\n            src={emojiPhotoUrl}\n            alt={emojiLiteral}\n            effect=\"opacity\"\n            height={50}\n            width={50}\n          />\n        }\n        <br />\n        {emojiNames.map((emojiName, emojiIdx) => (\n          <Button\n            key={emojiName}\n            as=\"div\"\n            name={`Click to copy ${emojiName}`}\n            color={clicked === emojiIdx ? \"success\" : \"light\"}\n            className=\"emojiName has-margin-bottom-xs\"\n            onClick={() =>\n              copyToClipboard(emojiName, emojiIdx, setClicked, setError)\n            }\n          >\n            {emojiName}\n          </Button>\n        ))}\n        {error && (\n          <Generic as=\"small\" className=\"has-text-danger\">\n            Ocorreu um erro ao copiar para seu clipboard.\n          </Generic>\n        )}\n      </Box>\n    </Column>\n  );\n};\n\nexport default Emoji;\n","import React from \"react\";\nimport { Title, Column } from \"rbx\";\nimport Emoji from \"./Emoji\";\n\nconst SubCategory = ({ name, emojis }) => {\n  return (\n    <>\n      <Title size={6}>{name}</Title>\n\n      <Column.Group multiline breakpoint=\"mobile\" gapSize={3}>\n        {emojis.map(data => (\n          <Emoji key={data[0].emojiId} data={data} />\n        ))}\n      </Column.Group>\n    </>\n  );\n};\n\nexport default SubCategory;\n","import React from \"react\";\nimport { Title } from \"rbx\";\nimport SubCategory from \"./SubCategory\";\n\nconst Category = ({ name, subCategories }) => {\n  return (\n    <>\n      <Title size={4}>{name}</Title>\n      {Object.entries(subCategories).map(([name, emojis]) => (\n        <SubCategory key={name} name={name} emojis={emojis} />\n      ))}\n    </>\n  );\n};\n\nexport default Category;\n","import React from \"react\";\nimport Category from \"../TableComponents/Category\";\n\nconst Table = ({ data }) => {\n  return Object.entries(data).map(([category, subCategories]) => {\n    return (\n      <Category\n        key={category}\n        className=\"has-margin-bottom-lg has-border-bottom-md\"\n        name={category}\n        subCategories={subCategories}\n      />\n    );\n  });\n};\n\nexport default Table;\n","// React + third party\nimport React, { useState } from \"react\";\nimport { useAsync } from \"react-async\";\nimport { Container, Footer } from \"rbx\";\n\n// Downloader service\nimport getData from \"./services/DataDownloader\";\n\n// Components\nimport GitEmojiNavbar from \"./components/Containers/GitEmojiNavbar\";\nimport GitEmojiHero from \"./components/Containers/GitEmojiHero\";\nimport Loading from \"./components/TableComponents/Loading\";\nimport Error from \"./components/TableComponents/Error\";\nimport Table from \"./components/Containers/Table\";\n\n// Styling\nimport \"./assets/App.scss\";\nimport \"./assets/spacing.scss\";\n\nconst App = () => {\n  let { data, error, isLoading } = useAsync({ promiseFn: getData });\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleInputChange = event => setInputValue(event.target.value);\n\n  // Filtar de acordo com o inputValue\n  if (data != null) {\n    data = Object.fromEntries(\n      Object.entries(data)\n        .map(([categoryName, subCategory]) => [\n          categoryName,\n          Object.fromEntries(\n            Object.entries(subCategory)\n              .map(([subCategoryName, emojis]) => [\n                subCategoryName,\n                emojis.filter(emoji =>\n                  emoji.some(emojiData =>\n                    emojiData.emojiId.includes(inputValue)\n                  )\n                )\n              ])\n              .filter(([_subCategoryName, emojis]) => emojis.length > 0)\n          )\n        ])\n        .filter(\n          ([_categoryName, subCategory]) => Object.keys(subCategory).length > 0\n        )\n    );\n  }\n\n  const containerBox =\n    (isLoading && <Loading />) ||\n    (error && <Error error={error} />) ||\n    (data && <Table data={data} />);\n\n  return (\n    <>\n      <GitEmojiNavbar />\n      <GitEmojiHero\n        inputValue={inputValue}\n        handleInputChange={handleInputChange}\n      />\n      <Container fluid> {containerBox} </Container>\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n\n// For columns on different sizes\n/*\n\nis-three-quarters-mobile\nis-two-thirds-tablet\nis-half-desktop\nis-one-third-widescreen\nis-one-quarter-fullhd\n\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}